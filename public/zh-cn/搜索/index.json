[{"content":"关于 Prebuilt VPN 与 cgproxy 打架的这件事 Update 2022-02-17: Initial post\n2022-03-23: 看完log 找到了最终方法\n2022-11-09: 早就换到漏油器了 舒服多了（\n太长不看版 直接跳到最终解决方法模块\nIntro 由于众所周知的原因，咱24/7挂着代理。\n因为linux有太多应用不看http_proxy变量，咱一直开着 cgproxy 来代理全机流量，一直都没有问题\n直到咱需要使用学校网络而尝试连接学校VPN。\n咕咕了好久之后，咱终于下定决心处理它。\n现象 正常上网的时候想连接学校的L2TP/IPsec VPN，打开 networkmanager 的 控制面板并点击连接VPN后它一直在转圈却没有成功\n分析与解决 直接查看一手log\n1 sudo journalctl -f 再重复一次操作即可看到实时的log。在这里咱看到了这么一段：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 Feb 16 23:51:49 testOnArch kded5[939]: org.kde.plasma.nm.kded: Unhandled VPN connection state change: 2 Feb 16 23:51:49 testOnArch akonadi_sendlater_agent[1283]: \u0026#34;Object does not exist at path “/org/freedesktop/NetworkManager/ActiveConnection/2”\u0026#34; Feb 16 23:51:49 testOnArch kmail[1269]: \u0026#34;Object does not exist at path “/org/freedesktop/NetworkManager/ActiveConnection/2”\u0026#34; Feb 16 23:51:49 testOnArch akonadi_mailmerge_agent[1278]: \u0026#34;Object does not exist at path “/org/freedesktop/NetworkManager/ActiveConnection/2”\u0026#34; Feb 16 23:51:49 testOnArch akonadi_followupreminder_agent[1260]: \u0026#34;Object does not exist at path “/org/freedesktop/NetworkManager/ActiveConnection/2”\u0026#34; Feb 16 23:51:49 testOnArch akonadi_imap_resource[1262]: \u0026#34;Object does not exist at path “/org/freedesktop/NetworkManager/ActiveConnection/2”\u0026#34; Feb 16 23:51:49 testOnArch qv2ray[1456]: \u0026#34;Object does not exist at path “/org/freedesktop/NetworkManager/ActiveConnection/2”\u0026#34; Feb 16 23:51:49 testOnArch akonadi_maildispatcher_agent[1276]: \u0026#34;Object does not exist at path “/org/freedesktop/NetworkManager/ActiveConnection/2”\u0026#34; Feb 16 23:51:49 testOnArch kgpg[1244]: \u0026#34;Object does not exist at path “/org/freedesktop/NetworkManager/ActiveConnection/2”\u0026#34; Feb 16 23:51:49 testOnArch akonadi_davgroupware_resource[1257]: \u0026#34;Object does not exist at path “/org/freedesktop/NetworkManager/ActiveConnection/2”\u0026#34; Feb 16 23:51:49 testOnArch akonadi_notes_agent[1282]: \u0026#34;Object does not exist at path “/org/freedesktop/NetworkManager/ActiveConnection/2”\u0026#34; Feb 16 23:51:49 testOnArch DiscoverNotifier[1053]: \u0026#34;Object does not exist at path “/org/freedesktop/NetworkManager/ActiveConnection/2”\u0026#34; Feb 16 23:51:49 testOnArch akonadi_sendlater_agent[1283]: \u0026#34;Object does not exist at path “/org/freedesktop/NetworkManager/ActiveConnection/2”\u0026#34; Feb 16 23:51:49 testOnArch akonadi_followupreminder_agent[1260]: \u0026#34;Object does not exist at path “/org/freedesktop/NetworkManager/ActiveConnection/2”\u0026#34; Feb 16 23:51:49 testOnArch akonadi_maildispatcher_agent[1276]: \u0026#34;Object does not exist at path “/org/freedesktop/NetworkManager/ActiveConnection/2”\u0026#34; Feb 16 23:51:49 testOnArch akonadi_davgroupware_resource[1257]: \u0026#34;Object does not exist at path “/org/freedesktop/NetworkManager/ActiveConnection/2”\u0026#34; Feb 16 23:51:49 testOnArch akonadi_imap_resource[1262]: \u0026#34;Object does not exist at path “/org/freedesktop/NetworkManager/ActiveConnection/2”\u0026#34; Feb 16 23:51:49 testOnArch akonadi_notes_agent[1282]: \u0026#34;Object does not exist at path “/org/freedesktop/NetworkManager/ActiveConnection/2”\u0026#34; Feb 16 23:51:49 testOnArch akonadi_mailmerge_agent[1278]: \u0026#34;Object does not exist at path “/org/freedesktop/NetworkManager/ActiveConnection/2”\u0026#34; Feb 16 23:51:49 testOnArch DiscoverNotifier[1053]: \u0026#34;Object does not exist at path “/org/freedesktop/NetworkManager/ActiveConnection/2”\u0026#34; Feb 16 23:51:49 testOnArch qv2ray[1456]: \u0026#34;Object does not exist at path “/org/freedesktop/NetworkManager/ActiveConnection/2”\u0026#34; Feb 16 23:51:49 testOnArch kded5[939]: org.kde.plasma.nm.kded: Unhandled VPN connection state change: 3 Feb 16 23:51:49 testOnArch NetworkManager[594]: \u0026lt;info\u0026gt; [11] vpn-connection[,\u0026#34;foobar\u0026#34;,0]: VPN connection: (ConnectInteractive) reply received Feb 16 23:51:49 testOnArch nm-l2tp-service[31487]: Check port 1701 嗯，有个qv2ray在这里 大概是cgproxy把VPN位子占了（？）试试看把这玩意关掉：\n1 systemctl stop cgproxy 再试一次 VPN就连接上了（\n以前在用Windows的时候，clash是直接整了个tun网卡来实现全局代理的。现在咱用qv2ray+cgproxy，就发现了这个问题，但是一直都没有去仔细debug，大概这就是咕咕咕吧\n在这之后 之后发现了关掉cgproxy之后连接vpn 再开cgproxy也能正常用\n直到2022-03-23 今天被 LetITFly 大佬在他的频道推荐了这篇文章 咱受宠若惊 于是下定决心写完它 不咕了不咕了不敢咕了\n经过群友提醒 cgproxy可以设置不代理的软件\n再跑了一遍 log ：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 nm-l2tp-service[39691]: xl2tpd started with pid 39768 NetworkManager[39768]: xl2tpd[39768]: Not looking for kernel SAref support. kernel: PPP generic driver version 2.4.2 kernel: NET: Registered PF_PPPOX protocol family kernel: l2tp_core: L2TP core driver, V2.0 kernel: l2tp_netlink: L2TP netlink interface NetworkManager[39768]: xl2tpd[39768]: Using l2tp kernel support. NetworkManager[39768]: xl2tpd[39768]: xl2tpd version xl2tpd-1.3.17 started on yukinodaisuki PID:39768 NetworkManager[39768]: xl2tpd[39768]: Written by Mark Spencer, Copyright (C) 1998, Adtran, Inc. NetworkManager[39768]: xl2tpd[39768]: Forked by Scott Balmos and David Stipp, (C) 2001 NetworkManager[39768]: xl2tpd[39768]: Inherited by Jeff McAdams, (C) 2002 NetworkManager[39768]: xl2tpd[39768]: Forked again by Xelerance (www.xelerance.com) (C) 2006-2016 NetworkManager[39768]: xl2tpd[39768]: Listening on IP address 0.0.0.0, port 1701 NetworkManager[39768]: xl2tpd[39768]: Connecting to host $destinationIP, port 1701 kernel: l2tp_ppp: PPPoL2TP kernel driver, V2.0 NetworkManager[39768]: xl2tpd[39768]: Connection established to $destinationIP, 1701. Local: 39853, Remote: 1 (ref=0/0). NetworkManager[39768]: xl2tpd[39768]: Calling on tunnel 39853 NetworkManager[39768]: xl2tpd[39768]: Call established with $destinationIP, Local: 6356, Remote: 1, Serial: 1 (ref=0/0) NetworkManager[39768]: xl2tpd[39768]: start_pppd: I\u0026#39;m running: NetworkManager[39768]: xl2tpd[39768]: \u0026#34;/usr/sbin/pppd\u0026#34; NetworkManager[39768]: xl2tpd[39768]: \u0026#34;plugin\u0026#34; NetworkManager[39768]: xl2tpd[39768]: \u0026#34;pppol2tp.so\u0026#34; NetworkManager[39768]: xl2tpd[39768]: \u0026#34;pppol2tp\u0026#34; NetworkManager[39768]: xl2tpd[39768]: \u0026#34;7\u0026#34; NetworkManager[39768]: xl2tpd[39768]: \u0026#34;passive\u0026#34; NetworkManager[39768]: xl2tpd[39768]: \u0026#34;nodetach\u0026#34; NetworkManager[39768]: xl2tpd[39768]: \u0026#34;:\u0026#34; NetworkManager[39768]: xl2tpd[39768]: \u0026#34;file\u0026#34; NetworkManager[39768]: xl2tpd[39768]: \u0026#34;/var/run/nm-l2tp-114514/ppp-options\u0026#34; pppd[39773]: Plugin pppol2tp.so loaded. pppd[39773]: Plugin /usr/lib/pppd/2.4.9/nm-l2tp-pppd-plugin.so loaded. pppd[39773]: pppd 2.4.9 started by root, uid 0 pppd[39773]: Using interface ppp0 pppd[39773]: Connect: ppp0 \u0026lt;--\u0026gt; pppd[39773]: Overriding mtu 1500 to 1400 pppd[39773]: Overriding mru 1500 to mtu value 1400 systemd-udevd[39745]: Using default interface naming scheme \u0026#39;v250\u0026#39;. NetworkManager[621]: \u0026lt;info\u0026gt; [1145.141919] manager: (ppp0): new Ppp device (/org/freedesktop/NetworkManager/Devices/10) pppd[39773]: Overriding mtu 1500 to 1400 pppd[39773]: PAP authentication succeeded charon[39715]: 10[KNL] $vpnInnerIP appeared on ppp0 charon-systemd[744]: $vpnInnerIP appeared on ppp0 charon[39715]: 07[KNL] $vpnInnerIP disappeared from ppp0 charon-systemd[744]: $vpnInnerIP disappeared from ppp0 charon[39715]: 14[KNL] $vpnInnerIP appeared on ppp0 charon-systemd[744]: $vpnInnerIP appeared on ppp0 charon[39715]: 15[KNL] interface ppp0 activated charon-systemd[744]: interface ppp0 activated pppd[39773]: Cannot determine ethernet address for proxy ARP pppd[39773]: local IP address $vpnInnerIP pppd[39773]: remote IP address $remoteIP pppd[39773]: primary DNS address $dnsAddress 在这之中 找到了 pppd xl2tpd nm-l2tp-service 这几个玩意 大概就是这些了吧\n然后试试将这几个软件加进去 config.json 的 program_noproxy 栏里面：\n1 sudo nano /etc/cgproxy/config.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \u0026#34;comment\u0026#34;:\u0026#34;For usage, see https://github.com/springzfx/cgproxy\u0026#34;, \u0026#34;port\u0026#34;: 12345, \u0026#34;program_noproxy\u0026#34;: [\u0026#34;v2ray\u0026#34;, \u0026#34;qv2ray\u0026#34;, \u0026#34;nm-l2tp-service\u0026#34;, \u0026#34;xl2tpd\u0026#34;, \u0026#34;pppd\u0026#34; ], \u0026#34;program_proxy\u0026#34;: [], \u0026#34;cgroup_noproxy\u0026#34;: [\u0026#34;/system.slice/v2ray.service\u0026#34;], \u0026#34;cgroup_proxy\u0026#34;: [\u0026#34;/\u0026#34;], \u0026#34;enable_gateway\u0026#34;: ture, \u0026#34;enable_dns\u0026#34;: true, \u0026#34;enable_udp\u0026#34;: true, \u0026#34;enable_tcp\u0026#34;: true, \u0026#34;enable_ipv4\u0026#34;: true, \u0026#34;enable_ipv6\u0026#34;: true, \u0026#34;table\u0026#34;: 10007, \u0026#34;fwmark\u0026#34;: 39283 } 不要照抄咱的config 请按照自己的情况判断\n保存后重启 cgproxy.service:\n1 sudo systemctl restart cgproxy.service 然后再测试一下，噔噔！好了！OwO 好个鬼头 原来是忘记检查一遍config 多打了一个逗号直接 core dump了（\n再仔细看看还有什么问题（（（\n最终解决方法 还是先用回 一开始的那个用法吧（\n","date":"2022-02-17T00:10:24Z","permalink":"http://localhost:1313/zh-cn/p/%E5%85%B3%E4%BA%8E-prebuilt-vpn-%E4%B8%8E-cgproxy-%E6%89%93%E6%9E%B6%E7%9A%84%E8%BF%99%E4%BB%B6%E4%BA%8B/","title":"关于 Prebuilt VPN 与 cgproxy 打架的这件事"},{"content":"如何为Brother新的打印机驱动打包AUR TODO 优化代码（咕 分析这两种驱动的文件数区别 分析这两种驱动安装过程的区别 引言 ​ 一般来说，Brother的打印机驱动分成了 cupswraper 和 lpr 两个独立的驱动。Arch-Wiki已经给出了怎么打包这样的驱动的教程，但是有一些新机器的驱动，比如 DCP-B7500D 和 HL-L2350DW ， 是混合在一起的新版驱动包。在这里咱记录下如何打包。\n准备 Arch-Linux PC ( 淦你打包来当然要用啊) 官方的 .deb 或 .rpm 驱动下载链接 建议读一下基本的打包指引(简体中文) https://wiki.archlinux.org/title/Arch_package_guidelines_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87) 写 PKGBUILD 一般来说这些驱动的版本都是 4.0.0\n咱根据 Roman Schmocker的 brother-hll2350dw package 做了自己的 PKGBUILD，请针对自己的实际情况进行修改 :\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # Maintainer: ous50 pkgname=brother-dcpb7500d printerModel=DCPB7500D pkgver=4.0.0 pkgrel=1 pkgdesc=\u0026#34;Printing driver for Brother DCP-B7500 printer\u0026#34; arch=(\u0026#34;i686\u0026#34; \u0026#34;x86_64\u0026#34; \u0026#34;armv7l\u0026#34;) //请去包中 data.tar.gz 的 \u0026#39;/opt/brother/Printers/$printerModel/lpd\u0026#39; 目录下查看有什么架构 url=\u0026#34;https://support.brother.com/g/b/producttop.aspx?c=in\u0026amp;lang=en\u0026amp;prod=dcpb7500d_as_cn\u0026#34; //该打印机的支持页面 license=(\u0026#34;EULA\u0026#34;) groups=(\u0026#34;base-devel\u0026#34;) depends=(\u0026#39;cups\u0026#39; \u0026#39;ghostscript\u0026#39;) depends_x86_64=(\u0026#39;lib32-glibc\u0026#39;) install=\u0026#34;$pkgname.install\u0026#34; source=( \u0026#34;https://download.brother.com/welcome/dlf103663/dcpb7500dpdrv-$pkgver-1.i386.deb\u0026#34; ) md5sums=( \u0026#34;c5d5c7febae0eab6254cb7332f4038c0\u0026#34; ) package(){ tar xf data.tar.gz // If you use .deb as your source, you must use this to fully decompress. (Not tested on .rpm packages) cp -R \u0026#34;$srcdir/opt\u0026#34; \u0026#34;$pkgdir/opt\u0026#34; ln -s \u0026#34;/opt/brother/Printers/DCPB7500D/lpd/$CARCH/rawtobr3\u0026#34; \u0026#34;$pkgdir/opt/brother/Printers/DCPB7500D/lpd/rawtobr3\u0026#34; ln -s \u0026#34;/opt/brother/Printers/DCPB7500D/lpd/$CARCH/brprintconflsr3\u0026#34; \u0026#34;$pkgdir/opt/brother/Printers/DCPB7500D/lpd/brprintconflsr3\u0026#34; install -d \u0026#34;$pkgdir/usr/lib/cups/filter/\u0026#34; ln -s \u0026#34;/opt/brother/Printers/DCPB7500D/cupswrapper/lpdwrapper\u0026#34; \u0026#34;$pkgdir/usr/lib/cups/filter/brother_lpdwrapper_DCPB7500D\u0026#34; install -d \u0026#34;$pkgdir/usr/share/cups/model/\u0026#34; ln -s \u0026#34;/opt/brother/Printers/DCPB7500D/cupswrapper/brother-DCPB7500D-cups-en.ppd\u0026#34; \u0026#34;$pkgdir/usr/share/cups/model\u0026#34; install -Dm644 \u0026#34;$srcdir/opt/brother/Printers/DCPB7500D/LICENSE_ENG.txt\u0026#34; \u0026#34;$pkgdir/usr/share/licenses/$pkgname/LICENSE_ENG.txt\u0026#34; install -Dm644 \u0026#34;$srcdir/opt/brother/Printers/DCPB7500D/LICENSE_JPN.txt\u0026#34; \u0026#34;$pkgdir/usr/share/licenses/$pkgname/LICENSE_JPN.txt\u0026#34; } 修改对应的md5值\n要让用户安装的时候得到提示，你可以写一个 xxx.intall 文件 （在我的这个例子是 brother-dcpb7500d.install）：\n1 2 3 4 5 6 7 8 9 post_install() { post_upgrade; } post_upgrade() { echo \u0026#34;Restart CUPS service to load the new files\u0026#34; echo \u0026#34;You can now register your new printer using the web interface at:\u0026#34; echo \u0026#34; http://localhost:631/\u0026#34; } 测试安装与上传 写完 PKGBUILD 之后， 做个测试：\n1 makepkg -rcsi 在安装后重启 cups.service，然后去打印机设置里看看有没有类似的东西：\n如果出现了类似的选项，就可以 上传到AUR repo\nTips提示: 在打印机设置中你可能会看到想这样的报错：\n1 Failed to search for a recommended driver: \u0026#39;The name org.fedoraproject.Config.Printing was not provided by any .service files\u0026#39; 遇到这种情况下需要安装 system-config-printer ：\n1 sudo pacman -S system-config-printer 致谢 对 Roman Schmocker 致以最诚挚的感谢。 没有您的帮助咱甚至连咱的 AUR 包都搞不定，更别说这篇博文了.\n感谢 Arch-Linux wiki 各位贡献者的教程w\n","date":"2022-01-25T03:46:22Z","permalink":"http://localhost:1313/zh-cn/p/%E5%A6%82%E4%BD%95%E4%B8%BAbrother%E6%96%B0%E7%9A%84%E6%89%93%E5%8D%B0%E6%9C%BA%E9%A9%B1%E5%8A%A8%E6%89%93%E5%8C%85aur/","title":"如何为Brother新的打印机驱动打包AUR"},{"content":"Bitwarden是一个免费、自由且开源的的密码管理器，服务端也完全开源，可以自己搭建。 本文将咱自建bitwarden的过程记录下来。\n更新 Updates 2021-09-30 ：了解更多nginx之后重新写了一遍config，而 Bitwarden_RS 已经改名成 Vaultwarden 了\n2021-11-03 ：增加了使用CDN访问时获取访客真实ip的方法\n2021-11-15 ：1. 修改了文章顺序提高阅读性 2.[增加了docker-compose的启动方法](#Docker-compose （没试过，有时间试试）)\n2022-08-15 ： 因应 vaultwarden wiki 的更新，修改了nginx 配置\n2023-01-11：新增了自动备份\n前言 那个男孩不想拥有自己的密码管理器呢，之前欧式都是 Google 密码和 iCloud keychain 一起用的，混合使用不仅难于跨平台同步（非chrome/apple设备的密码更是无法填充），而且数据也无法自己掌控。上了大学之后，我了解到了全平台开源密码管理器bitwarden。经过了将近半年的折腾，终于做得好用点了，现在记录一下。\n准备的东西 一个服务器，至少200MB RAM\n一个域名，这里就用了自己在使用的 (以 bitwarden.example.com 为例)\n还有亿点点耐心和学习搭建密码管理器的兴趣\n下载docker镜像 这里我使用的是vaultwarden（前称Bitwarden_RS），虽然它是第三方用Rust重写的，但是需要的资源更少，而且默认开启高级会员的功能 谁不想白嫖呢。\n1 docker pull vaultwarden/server 打开你的域名dns管理界面，添加bitwarden的dns记录。\n配置vaultwarden 初始化运行 Docker-compose （没试过，有时间试试） 注意 需要先行安装 Docker-compose 包\n根据 Vaultwarden-Wiki中关于Docker-Compose的描述，你要找个自己舒服的地方，新建 docker-compose.yml:\n1 touch docker-compose.yml 或者直接进行一个nano的使用 这是什么保姆级教学：\n1 nano docker-compose.yml 然后根据自己的情况把下面的贴进去：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 version: \u0026#39;3\u0026#39; services: vaultwarden: image: vaultwarden/server:latest container_name: vaultwarden restart: always #指定重启策略 ports: - \u0026#34;127.0.0.1:\u0026lt;http port\u0026gt;:80\u0026#34; - \u0026#34;127.0.0.1:3012:3012\u0026#34; environment: - WEBSOCKET_ENABLED=true # 启用 WebSocket 通知. #- ADMIN_TOKEN= #启用管理界面 volumes: - /data-directory-you-want/:/data #指定你的数据存放目录（改冒号左边） 之后进行一个docker-compose 的跑：\n1 docker-compose up -d Docker-cli 在命令行根据实际情况（需求）执行\n1 docker run -d --name=vaultwarden -e WEBSOCKET_ENABLED=true -e LOG_FILE=/data/bitwarden.log -p 127.0.0.1:\u0026lt;http port\u0026gt;:80 -p 127.0.0.1:\u0026lt;websocket port\u0026gt;:3012 -v /data-directory-you-want/:/data/ --restart=always vaultwarden/server:latest 注：\n\u0026ndash;name=你想要在docker里面显示的名字 （可选，方便后续管理）\n80和3012的设置端口不能冲突废话\n\u0026ndash;restart=always 自动重启\n-v /data-directory-you-want/:/data/ 注意这是绝对路径,一开始没注意到导致现在整个文件夹都在根目录还找了1个星期都没有找到\n然后配置反代（一定要设置TLS）。\n登录网页并设置初始账户 直接打开 bitwarden.example.com ，就出现如下图所示界面（当然这是支持中文的）\n直接按着引导走就是了。\n配置反代 情况1:bitwarden单独放在一个服务器上 直接跳到初始化配置,然后将设置改为 -p 80:80 -p 3012:3012\n情况2:bitwarden与多个对外服务共存 配置Nginx反代,根据具体情况修改 修改/etc/nginx/nginx.conf，添加如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 # http server { listen 80; listen [::]:80; server_name bitwarden.example.com; ##防止搜索引擎收录 if ($http_user_agent ~* \u0026#34;qihoobot|Baiduspider|Googlebot|Googlebot-Mobile|Googlebot-Image|Mediapartners-Google|Adsbot-Google|Feedfetcher-Google|Yahoo! Slurp|Yahoo! Slurp China|YoudaoBot|Sosospider|Sogou spider|Sogou web spider|MSNBot|ia_archiver|Tomato Bot|^$\u0026#34;) { return 404; } location / { # 访问80端口后的所有路径都转发到 proxy_pass 配置的ip中 ##如果使用cf加速就换成302 return 301 https://bitwarden.example.com; } } # https server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name bitwarden.example.com; if ($http_user_agent ~* \u0026#34;qihoobot|Baiduspider|Googlebot|Googlebot-Mobile|Googlebot-Image|Mediapartners-Google|Adsbot-Google|Feedfetcher-Google|Yahoo! Slurp|Yahoo! Slurp China|YoudaoBot|Sosospider|Sogou spider|Sogou web spider|MSNBot|ia_archiver|Tomato Bot|^$\u0026#34;) { return 404; } #启用HSTS add_header Strict-Transport-Security \u0026#34;max-age=31536000; includeSubDomains\u0026#34; always; ssl_certificate /path/to/ssl/cert; ssl_certificate_key /path/to/cert/key; keepalive_timeout 70; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; location / { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Port $server_port; proxy_pass http://localhost:\u0026lt;http port\u0026gt;; } location /notifications/hub { proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $http_connection; proxy_set_header X-Real-IP $proxy_add_x_forwarded_for; proxy_pass http://localhost:\u0026lt;websocket port\u0026gt;; } location /notifications/hub/negotiate { proxy_http_version 1.1; proxy_set_header \u0026#34;Connection\u0026#34; \u0026#34;\u0026#34;; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_pass http://localhost:\u0026lt;http port\u0026gt;; } } 保存并退出，重启nginx：\n1 systemctl restart nginx 高级设定 开启管理界面 添加环境变量-e ADMIN_TOKEN=XXXX（XXXX为管理界面密码）\n打开bitwarden.example.com/admin，用你设置好的token登入\n登入后在general settings那里把domain url改成你的域名https://bitwarden.example.com (注意要加https://)\nallow new signups就是新用户注册许可的开关啦（\n添加 SMTP 服务 配置 SMTP 服务可以开启bitwarden的邮件传送功能，能开启二步验证(2FA)，能发送邀请，还能给自己邮箱发送password hint(管理密码提示)防止自己脑残忘掉master password\n这里咱用的是yandex的self-host email，配置教程可以看newslearner的教程（有些内容有可能过时）或者yandex自己的教程(EN)。\n创建新的成员账户，即需要用的收发信账户。 登入并完成注册。 打开yandex mail登入，打开设置 选other，然后左边选email client，开启第三方客户端访问权限 到security那里，生成app password并复制。 回到管理界面，在smtp Email settings那里如图填(或者叫Starttls on， port 587)，password就填入刚才生成的app password。 保存，并到下方的send test email测试 如果看到这个banner出来并收到如下测试邮件的话，Yattase！配置成功了w！ Enjoy~ 使用CDN时让实例获取访客真实ip 一般来讲咱们都会使用CDN来提高服务可用性。但是默认设置中Vaultwarden读取 X-Real-IP 的header，这样会读到的全是CDN的节点IP。\n要做到获取访客真实IP，可以直接在Admin Panel 中找到 Read Client Header，改成 X-Forwarded-For 保存即可。\n备份与还原 这种高敏感度的东西，在各种意义上都需要有备份 ，最主要是防止像下图OVH这样真.数据上云的情况\n咱一直都直接把整个目录打包扔到本地的，具体的操作 H3arn的博客 已经有说明了， 咱懒得写了咕咕咕\n我现在是用cron每小时都备份一次，去掉config.json:\n1 2 3 4 #!/bin/bash PATH=/sbin:/usr/sbin/:/usr/local/sbin:/bin:/usr/local/bin /usr/bin/tar --zstd -cf \u0026lt;备份的位置\u0026gt;/bw-bkp$(date \u0026#39;+%F_%H%M%S\u0026#39;).tar.zst \u0026lt;数据位置\u0026gt;/attachments \u0026lt;数据位置\u0026gt;/db.sqlite3* \u0026lt;数据位置\u0026gt;/rsa* \u0026lt;数据位置\u0026gt;/sends \u0026lt;数据位置\u0026gt;/icon_cache 这样就能将数据库到处扔了w\n如果你嫌麻烦，或者想数据随便放哪里都行，可以直接整个文件夹都备份：\n1 2 3 4 #!/bin/bash PATH=/sbin:/usr/sbin/:/usr/local/sbin:/bin:/usr/local/bin /usr/bin/tar --zstd -cf \u0026lt;备份的位置\u0026gt;/bw-bkp$(date \u0026#39;+%F_%H%M%S\u0026#39;).tar.zst \u0026lt;数据位置\u0026gt; 也可以用 PGP 加密之后到处扔，保管好自己的 private key 就行。只要把自己的 public key 扔到服务器并信任这个 key 就行：\n1 2 3 4 #!/bin/bash PATH=/sbin:/usr/sbin/:/usr/local/sbin:/bin:/usr/local/bin /usr/bin/gpgtar -e -r （你的 Key ID） （数据位置） \u0026gt; （备份的位置）/bw-bkp$(date \u0026#39;+%F_%H%M%S\u0026#39;).tar.gpg 自动备份 根据上面的这一堆东西操作，写了个 脚本。需要安装 gpg curl 和 rsync 。直接把这个下下来，然后根据需求改一下， 新建一个定时任务定期跑一下就行。\n致谢 感谢h3arn发现咱的博客的问题，并做了咱一直没写的 备份与还原 部分。\n感谢8-bit Inc. 与 dani-garcia，分别做出了 bitwarden及其衍生项目vaultwarden，让咱们有一个新的选择。\nLinks: Bitwarden官网: https://bitwarden.com/ Vaultwarden Github页面（有任何问题记住要往这边反映）: https://github.com/dani-garcia/vaultwarden Vaultwarden Docker页面: https://hub.docker.com/r/vaultwarden/server\n版权声明 本文由欧式fifty（ous50）原创，采用Attribution-NonCommercial-ShareAlike 4.0 International授权\nThis work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. 转载请附上原文地址 https://blog.ous50.moe/2021/03/12/vaultwarden搭建/\n","date":"2021-03-12T17:04:18Z","permalink":"http://localhost:1313/zh-cn/p/%E5%88%A9%E7%94%A8docker%E6%90%AD%E5%BB%BAvaultwarden/","title":"利用docker搭建vaultwarden"}]